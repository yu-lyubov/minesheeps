export const getDeclarationsFromConfig = (tomlDeclarations, functionsConfig) => {
    var _a;
    const declarations = [];
    const functionsVisited = new Set();
    // We start by iterating over all the TOML declarations. For any declaration
    // for which we also have a function configuration object, we replace the
    // path because that object takes precedence.
    for (const declaration of tomlDeclarations) {
        const { path } = (_a = functionsConfig[declaration.function]) !== null && _a !== void 0 ? _a : {};
        if (path) {
            functionsVisited.add(declaration.function);
            declarations.push({ function: declaration.function, path });
        }
        else {
            declarations.push(declaration);
        }
    }
    // Finally, we must create declarations for functions that are not declared
    // in the TOML at all.
    for (const name in functionsConfig) {
        const { path } = functionsConfig[name];
        if (!functionsVisited.has(name) && path) {
            declarations.push({ function: name, path });
        }
    }
    return declarations;
};

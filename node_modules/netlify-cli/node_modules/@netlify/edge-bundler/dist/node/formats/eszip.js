import { join } from 'path';
import { wrapBundleError } from '../bundle_error.js';
import { getPackagePath } from '../package_json.js';
import { getFileHash } from '../utils/sha256.js';
const bundleESZIP = async ({ basePath, buildID, debug, deno, distDirectory, featureFlags, functions, importMap, }) => {
    const extension = '.eszip';
    const destPath = join(distDirectory, `${buildID}${extension}`);
    const { bundler, importMap: bundlerImportMap } = getESZIPPaths();
    const payload = {
        basePath,
        destPath,
        functions,
        importMapURL: importMap.toDataURL(),
    };
    const flags = ['--allow-all', '--no-config'];
    if (!debug) {
        flags.push('--quiet');
    }
    // To actually vendor the eszip module, we need to supply the import map that
    // redirects `https://deno.land/` URLs to the local files.
    if (featureFlags.edge_functions_use_vendored_eszip) {
        flags.push(`--import-map=${bundlerImportMap}`);
    }
    try {
        await deno.run(['run', ...flags, bundler, JSON.stringify(payload)], { pipeOutput: true });
    }
    catch (error) {
        throw wrapBundleError(error, { format: 'eszip' });
    }
    const hash = await getFileHash(destPath);
    return { extension, format: 'eszip2', hash };
};
const getESZIPPaths = () => {
    const denoPath = join(getPackagePath(), 'deno');
    return {
        bundler: join(denoPath, 'bundle.ts'),
        importMap: join(denoPath, 'vendor', 'import_map.json'),
    };
};
export { bundleESZIP as bundle };

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getByQualityPriorityValue = getByQualityPriorityValue;
exports.spliceURL = spliceURL;

// @flow
function spliceURL(...args) {
  return Array.from(args).reduce((lastResult, current) => lastResult + current).replace(/([^:])(\/)+(.)/g, `$1/$3`);
}
/**
 * Quality values, or q-values and q-factors, are used to describe the order
 * of priority of values in a comma-separated list.
 * It is a special syntax allowed in some HTTP headers and in HTML.
 * https://developer.mozilla.org/en-US/docs/Glossary/Quality_values
 * @param headerValue
 */


function getByQualityPriorityValue(headerValue) {
  if (typeof headerValue !== 'string') {
    return '';
  }

  const split = headerValue.split(',');

  if (split.length <= 1) {
    const qList = split[0].split(';');
    return qList[0];
  }

  let [header] = split.reduce((acc, item) => {
    const qList = item.split(';');

    if (qList.length > 1) {
      const [accept, q] = qList;
      const [, query] = q.split('=');
      acc.push([accept.trim(), query ? query : 0]);
    } else {
      acc.push([qList[0], 0]);
    }

    return acc;
  }, []).sort(function (a, b) {
    return b[1] - a[1];
  });
  return header[0];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzcGxpY2VVUkwiLCJhcmdzIiwiQXJyYXkiLCJmcm9tIiwicmVkdWNlIiwibGFzdFJlc3VsdCIsImN1cnJlbnQiLCJyZXBsYWNlIiwiZ2V0QnlRdWFsaXR5UHJpb3JpdHlWYWx1ZSIsImhlYWRlclZhbHVlIiwic3BsaXQiLCJsZW5ndGgiLCJxTGlzdCIsImhlYWRlciIsImFjYyIsIml0ZW0iLCJhY2NlcHQiLCJxIiwicXVlcnkiLCJwdXNoIiwidHJpbSIsInNvcnQiLCJhIiwiYiJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9zdHJpbmcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcblxuZXhwb3J0IGZ1bmN0aW9uIHNwbGljZVVSTCguLi5hcmdzOiBzdHJpbmdbXSk6IHN0cmluZyB7XG4gIHJldHVybiBBcnJheS5mcm9tKGFyZ3MpXG4gICAgLnJlZHVjZSgobGFzdFJlc3VsdCwgY3VycmVudCkgPT4gbGFzdFJlc3VsdCArIGN1cnJlbnQpXG4gICAgLnJlcGxhY2UoLyhbXjpdKShcXC8pKyguKS9nLCBgJDEvJDNgKTtcbn1cblxuLyoqXG4gKiBRdWFsaXR5IHZhbHVlcywgb3IgcS12YWx1ZXMgYW5kIHEtZmFjdG9ycywgYXJlIHVzZWQgdG8gZGVzY3JpYmUgdGhlIG9yZGVyXG4gKiBvZiBwcmlvcml0eSBvZiB2YWx1ZXMgaW4gYSBjb21tYS1zZXBhcmF0ZWQgbGlzdC5cbiAqIEl0IGlzIGEgc3BlY2lhbCBzeW50YXggYWxsb3dlZCBpbiBzb21lIEhUVFAgaGVhZGVycyBhbmQgaW4gSFRNTC5cbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvR2xvc3NhcnkvUXVhbGl0eV92YWx1ZXNcbiAqIEBwYXJhbSBoZWFkZXJWYWx1ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QnlRdWFsaXR5UHJpb3JpdHlWYWx1ZShoZWFkZXJWYWx1ZTogc3RyaW5nIHwgdW5kZWZpbmVkIHwgbnVsbCk6IHN0cmluZyB7XG4gIGlmICh0eXBlb2YgaGVhZGVyVmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgY29uc3Qgc3BsaXQgPSBoZWFkZXJWYWx1ZS5zcGxpdCgnLCcpO1xuXG4gIGlmIChzcGxpdC5sZW5ndGggPD0gMSkge1xuICAgIGNvbnN0IHFMaXN0ID0gc3BsaXRbMF0uc3BsaXQoJzsnKTtcbiAgICByZXR1cm4gcUxpc3RbMF07XG4gIH1cblxuICBsZXQgW2hlYWRlcl0gPSBzcGxpdFxuICAgIC5yZWR1Y2UoKGFjYywgaXRlbTogc3RyaW5nKSA9PiB7XG4gICAgICBjb25zdCBxTGlzdCA9IGl0ZW0uc3BsaXQoJzsnKTtcbiAgICAgIGlmIChxTGlzdC5sZW5ndGggPiAxKSB7XG4gICAgICAgIGNvbnN0IFthY2NlcHQsIHFdID0gcUxpc3Q7XG4gICAgICAgIGNvbnN0IFssIHF1ZXJ5XSA9IHEuc3BsaXQoJz0nKTtcbiAgICAgICAgYWNjLnB1c2goW2FjY2VwdC50cmltKCksIHF1ZXJ5ID8gcXVlcnkgOiAwXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY2MucHVzaChbcUxpc3RbMF0sIDBdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgW10gYXMgYW55KVxuICAgIC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gYlsxXSAtIGFbMV07XG4gICAgfSk7XG4gIHJldHVybiBoZWFkZXJbMF07XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFFTyxTQUFTQSxTQUFULENBQW1CLEdBQUdDLElBQXRCLEVBQThDO0VBQ25ELE9BQU9DLEtBQUssQ0FBQ0MsSUFBTixDQUFXRixJQUFYLEVBQ0pHLE1BREksQ0FDRyxDQUFDQyxVQUFELEVBQWFDLE9BQWIsS0FBeUJELFVBQVUsR0FBR0MsT0FEekMsRUFFSkMsT0FGSSxDQUVJLGlCQUZKLEVBRXdCLE9BRnhCLENBQVA7QUFHRDtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDTyxTQUFTQyx5QkFBVCxDQUFtQ0MsV0FBbkMsRUFBbUY7RUFDeEYsSUFBSSxPQUFPQSxXQUFQLEtBQXVCLFFBQTNCLEVBQXFDO0lBQ25DLE9BQU8sRUFBUDtFQUNEOztFQUVELE1BQU1DLEtBQUssR0FBR0QsV0FBVyxDQUFDQyxLQUFaLENBQWtCLEdBQWxCLENBQWQ7O0VBRUEsSUFBSUEsS0FBSyxDQUFDQyxNQUFOLElBQWdCLENBQXBCLEVBQXVCO0lBQ3JCLE1BQU1DLEtBQUssR0FBR0YsS0FBSyxDQUFDLENBQUQsQ0FBTCxDQUFTQSxLQUFULENBQWUsR0FBZixDQUFkO0lBQ0EsT0FBT0UsS0FBSyxDQUFDLENBQUQsQ0FBWjtFQUNEOztFQUVELElBQUksQ0FBQ0MsTUFBRCxJQUFXSCxLQUFLLENBQ2pCTixNQURZLENBQ0wsQ0FBQ1UsR0FBRCxFQUFNQyxJQUFOLEtBQXVCO0lBQzdCLE1BQU1ILEtBQUssR0FBR0csSUFBSSxDQUFDTCxLQUFMLENBQVcsR0FBWCxDQUFkOztJQUNBLElBQUlFLEtBQUssQ0FBQ0QsTUFBTixHQUFlLENBQW5CLEVBQXNCO01BQ3BCLE1BQU0sQ0FBQ0ssTUFBRCxFQUFTQyxDQUFULElBQWNMLEtBQXBCO01BQ0EsTUFBTSxHQUFHTSxLQUFILElBQVlELENBQUMsQ0FBQ1AsS0FBRixDQUFRLEdBQVIsQ0FBbEI7TUFDQUksR0FBRyxDQUFDSyxJQUFKLENBQVMsQ0FBQ0gsTUFBTSxDQUFDSSxJQUFQLEVBQUQsRUFBZ0JGLEtBQUssR0FBR0EsS0FBSCxHQUFXLENBQWhDLENBQVQ7SUFDRCxDQUpELE1BSU87TUFDTEosR0FBRyxDQUFDSyxJQUFKLENBQVMsQ0FBQ1AsS0FBSyxDQUFDLENBQUQsQ0FBTixFQUFXLENBQVgsQ0FBVDtJQUNEOztJQUNELE9BQU9FLEdBQVA7RUFDRCxDQVhZLEVBV1YsRUFYVSxFQVlaTyxJQVpZLENBWVAsVUFBVUMsQ0FBVixFQUFhQyxDQUFiLEVBQWdCO0lBQ3BCLE9BQU9BLENBQUMsQ0FBQyxDQUFELENBQUQsR0FBT0QsQ0FBQyxDQUFDLENBQUQsQ0FBZjtFQUNELENBZFksQ0FBZjtFQWVBLE9BQU9ULE1BQU0sQ0FBQyxDQUFELENBQWI7QUFDRCJ9